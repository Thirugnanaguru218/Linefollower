CCS PCM C Compiler, Version 5.008, 5967               11-Nov-24 21:36

               Filename:   D:\ESI\Linefollower_PIC\New folder\main.lst

               ROM used:   173 words (2%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           8 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   06E
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #fuses HS, NOWDT, NOLVP 
.................... #use delay(clock=40000000)  // 40 MHz clock frequency 
....................  
.................... // Motor direction control pins (connected to PORTC) 
.................... #define LEFT_MOTOR_FORWARD   PIN_C0 // Left motor forward direction 
.................... #define LEFT_MOTOR_BACKWARD  PIN_C1 // Left motor backward direction 
.................... #define RIGHT_MOTOR_FORWARD  PIN_C2 // Right motor forward direction 
.................... #define RIGHT_MOTOR_BACKWARD PIN_C3 // Right motor backward direction 
....................  
.................... // Sensors 
.................... #define LEFT_SENSOR PIN_D0 
.................... #define RIGHT_SENSOR PIN_D1 
....................  
.................... // Motor control functions 
.................... void move_forward() { 
....................     output_high(LEFT_MOTOR_FORWARD);  // Move left motor forward 
....................     output_low(LEFT_MOTOR_BACKWARD); 
....................     output_high(RIGHT_MOTOR_FORWARD); // Move right motor forward 
....................     output_low(RIGHT_MOTOR_BACKWARD); 
.................... } 
....................  
.................... void move_backward() { 
....................     output_low(LEFT_MOTOR_FORWARD);   // Move left motor backward 
*
0004:  BCF    20.0
0005:  MOVF   20,W
0006:  BSF    03.5
0007:  MOVWF  07
0008:  BCF    03.5
0009:  BCF    07.0
....................     output_high(LEFT_MOTOR_BACKWARD); 
000A:  BCF    20.1
000B:  MOVF   20,W
000C:  BSF    03.5
000D:  MOVWF  07
000E:  BCF    03.5
000F:  BSF    07.1
....................     output_low(RIGHT_MOTOR_FORWARD);  // Move right motor backward 
0010:  BCF    20.2
0011:  MOVF   20,W
0012:  BSF    03.5
0013:  MOVWF  07
0014:  BCF    03.5
0015:  BCF    07.2
....................     output_high(RIGHT_MOTOR_BACKWARD); 
0016:  BCF    20.3
0017:  MOVF   20,W
0018:  BSF    03.5
0019:  MOVWF  07
001A:  BCF    03.5
001B:  BSF    07.3
001C:  BCF    0A.3
001D:  BCF    0A.4
001E:  GOTO   094 (RETURN)
.................... } 
....................  
.................... void turn_left() { 
....................     output_low(LEFT_MOTOR_FORWARD);   // Stop left motor 
001F:  BCF    20.0
0020:  MOVF   20,W
0021:  BSF    03.5
0022:  MOVWF  07
0023:  BCF    03.5
0024:  BCF    07.0
....................     output_high(LEFT_MOTOR_BACKWARD); 
0025:  BCF    20.1
0026:  MOVF   20,W
0027:  BSF    03.5
0028:  MOVWF  07
0029:  BCF    03.5
002A:  BSF    07.1
....................     output_low(RIGHT_MOTOR_FORWARD); // Move right motor forward 
002B:  BCF    20.2
002C:  MOVF   20,W
002D:  BSF    03.5
002E:  MOVWF  07
002F:  BCF    03.5
0030:  BCF    07.2
....................     output_low(RIGHT_MOTOR_BACKWARD); 
0031:  BCF    20.3
0032:  MOVF   20,W
0033:  BSF    03.5
0034:  MOVWF  07
0035:  BCF    03.5
0036:  BCF    07.3
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   09B (RETURN)
.................... } 
....................  
.................... void turn_right() { 
....................     output_low(LEFT_MOTOR_FORWARD);  // Move left motor forward 
003A:  BCF    20.0
003B:  MOVF   20,W
003C:  BSF    03.5
003D:  MOVWF  07
003E:  BCF    03.5
003F:  BCF    07.0
....................     output_low(LEFT_MOTOR_BACKWARD); 
0040:  BCF    20.1
0041:  MOVF   20,W
0042:  BSF    03.5
0043:  MOVWF  07
0044:  BCF    03.5
0045:  BCF    07.1
....................     output_low(RIGHT_MOTOR_FORWARD);  // Stop right motor 
0046:  BCF    20.2
0047:  MOVF   20,W
0048:  BSF    03.5
0049:  MOVWF  07
004A:  BCF    03.5
004B:  BCF    07.2
....................     output_high(RIGHT_MOTOR_BACKWARD); 
004C:  BCF    20.3
004D:  MOVF   20,W
004E:  BSF    03.5
004F:  MOVWF  07
0050:  BCF    03.5
0051:  BSF    07.3
0052:  BCF    0A.3
0053:  BCF    0A.4
0054:  GOTO   0A2 (RETURN)
.................... } 
....................  
.................... void stop() { 
....................     output_low(LEFT_MOTOR_FORWARD);  // Stop both motors 
0055:  BCF    20.0
0056:  MOVF   20,W
0057:  BSF    03.5
0058:  MOVWF  07
0059:  BCF    03.5
005A:  BCF    07.0
....................     output_low(LEFT_MOTOR_BACKWARD); 
005B:  BCF    20.1
005C:  MOVF   20,W
005D:  BSF    03.5
005E:  MOVWF  07
005F:  BCF    03.5
0060:  BCF    07.1
....................     output_low(RIGHT_MOTOR_FORWARD); 
0061:  BCF    20.2
0062:  MOVF   20,W
0063:  BSF    03.5
0064:  MOVWF  07
0065:  BCF    03.5
0066:  BCF    07.2
....................     output_low(RIGHT_MOTOR_BACKWARD); 
0067:  BCF    20.3
0068:  MOVF   20,W
0069:  BSF    03.5
006A:  MOVWF  07
006B:  BCF    03.5
006C:  BCF    07.3
006D:  RETURN
.................... } 
....................  
.................... void main() { 
006E:  MOVF   03,W
006F:  ANDLW  1F
0070:  MOVWF  03
0071:  MOVLW  FF
0072:  MOVWF  20
0073:  BSF    03.5
0074:  BSF    1F.0
0075:  BSF    1F.1
0076:  BSF    1F.2
0077:  BCF    1F.3
0078:  MOVLW  07
0079:  MOVWF  1C
007A:  BCF    03.7
....................     set_tris_c(0x00);  // Set PORTC as output for motor control 
007B:  MOVLW  00
007C:  MOVWF  07
007D:  BCF    03.5
007E:  MOVWF  20
....................     set_tris_d(0xFF);  // Set PORTD as input for sensors (D0 and D1) 
007F:  MOVLW  FF
0080:  BSF    03.5
0081:  MOVWF  08
....................  
....................     while(TRUE) { 
....................         int left = input(LEFT_SENSOR);   // Read left sensor 
....................         int right = input(RIGHT_SENSOR); // Read right sensor 
0082:  BSF    08.0
....................  
....................         if (left == 0 && right == 0) {  // Both sensors detect the line (0) 
*
008D:  MOVF   21,F
008E:  BTFSS  03.2
008F:  GOTO   095
0090:  MOVF   22,F
0091:  BTFSS  03.2
0092:  GOTO   095
....................             move_backward();  // Move forward 
0093:  GOTO   004
....................         } else if (left == 0 && right == 1) {  // Left sensor on line, right sensor off 
0094:  GOTO   0AA
0095:  MOVF   21,F
0096:  BTFSS  03.2
0097:  GOTO   09C
0098:  DECFSZ 22,W
0099:  GOTO   09C
....................             turn_left();  // Turn left 
009A:  GOTO   01F
....................         } else if (left == 1 && right == 0) {  // Right sensor on line, left sensor off 
009B:  GOTO   0AA
009C:  DECFSZ 21,W
009D:  GOTO   0A3
009E:  MOVF   22,F
009F:  BTFSS  03.2
00A0:  GOTO   0A3
....................             turn_right();  // Turn right 
00A1:  GOTO   03A
....................         } else if (left == 1 && right == 1) {  // Both sensors off line 
00A2:  GOTO   0AA
00A3:  DECFSZ 21,W
00A4:  GOTO   0A9
00A5:  DECFSZ 22,W
00A6:  GOTO   0A9
....................             stop();  // Move backward 
00A7:  CALL   055
....................         } else { 
00A8:  GOTO   0AA
....................             stop();  // Unknown condition: stop the motors 
00A9:  CALL   055
....................         } 
00AA:  BSF    03.5
00AB:  GOTO   082
....................     } 
.................... } 
00AC:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
