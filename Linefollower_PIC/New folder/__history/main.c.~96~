#include <16F877A.h>
#fuses HS, NOWDT, NOLVP
#use delay(clock=40000000)  // 40 MHz clock frequency

// Motor direction control pins (connected to PORTC)
#define LEFT_MOTOR_FORWARD   PIN_C0 // Left motor forward direction
#define LEFT_MOTOR_BACKWARD  PIN_C1 // Left motor backward direction
#define RIGHT_MOTOR_FORWARD  PIN_C2 // Right motor forward direction
#define RIGHT_MOTOR_BACKWARD PIN_C3 // Right motor backward direction

// Motor Enable pins for PWM control (connected to CCP1 and CCP2)
#define LEFT_MOTOR_ENABLE    PIN_C4 // Left motor enable (CCP1)
#define RIGHT_MOTOR_ENABLE   PIN_C5 // Right motor enable (CCP2)

// Sensors
#define LEFT_SENSOR PIN_D0
#define RIGHT_SENSOR PIN_D1

// Setup PWM for motor speed control
void setup_pwm() {
    setup_ccp1(CCP_PWM);  // Configure CCP1 for PWM (for left motor enable)
    setup_ccp2(CCP_PWM);  // Configure CCP2 for PWM (for right motor enable)
    setup_timer_2(T2_DIV_BY_16, 255, 1);  // Set up Timer2 with prescaler 16 for 1kHz PWM frequency
}

// Set PWM duty cycle (0-100% for speed control)
void set_left_motor_speed(int duty_cycle) {
    int16 pwm_value = (int16)(duty_cycle * 10.23);  // Convert percentage to 10-bit value (0-1023)
    set_pwm1_duty(pwm_value);  // Set duty cycle for left motor enable (CCP1)
}

void set_right_motor_speed(int duty_cycle) {
    int16 pwm_value = (int16)(duty_cycle * 10.23);  // Convert percentage to 10-bit value (0-1023)
    set_pwm2_duty(pwm_value);  // Set duty cycle for right motor enable (CCP2)
}

// Motor control functions
void move_forward(int speed) {
    output_high(LEFT_MOTOR_FORWARD);  // Move left motor forward
    output_low(LEFT_MOTOR_BACKWARD);
    output_high(RIGHT_MOTOR_FORWARD); // Move right motor forward
    output_low(RIGHT_MOTOR_BACKWARD);
    set_left_motor_speed(speed);  // Set speed for left motor
    set_right_motor_speed(speed); // Set speed for right motor
}

void move_backward(int speed) {
    output_low(LEFT_MOTOR_FORWARD);   // Move left motor backward
    output_high(LEFT_MOTOR_BACKWARD);
    output_low(RIGHT_MOTOR_FORWARD);  // Move right motor backward
    output_high(RIGHT_MOTOR_BACKWARD);
    set_left_motor_speed(speed);  // Set speed for left motor
    set_right_motor_speed(speed); // Set speed for right motor
}

void turn_left(int speed) {
    output_low(LEFT_MOTOR_FORWARD);   // Stop left motor
    output_low(LEFT_MOTOR_BACKWARD);
    output_high(RIGHT_MOTOR_FORWARD); // Move right motor forward
    output_low(RIGHT_MOTOR_BACKWARD);
    set_right_motor_speed(speed);  // Set speed for right motor
}

void turn_right(int speed) {
    output_high(LEFT_MOTOR_FORWARD);  // Move left motor forward
    output_low(LEFT_MOTOR_BACKWARD);
    output_low(RIGHT_MOTOR_FORWARD);  // Stop right motor
    output_low(RIGHT_MOTOR_BACKWARD);
    set_left_motor_speed(speed);  // Set speed for left motor
}

void stop() {
    output_low(LEFT_MOTOR_FORWARD);  // Stop both motors
    output_low(LEFT_MOTOR_BACKWARD);
    output_low(RIGHT_MOTOR_FORWARD);
    output_low(RIGHT_MOTOR_BACKWARD);
    set_left_motor_speed(0);  // Set both motor speeds to 0 (stop)
    set_right_motor_speed(0);
}

void main() {
    set_tris_c(0x00);  // Set PORTC as output for motor control (C0-C5)
    set_tris_d(0xFF);  // Set PORTD as input for sensors (D0 and D1)

    setup_pwm();  // Initialize PWM for motors

    while(TRUE) {
        int left = input(LEFT_SENSOR);   // Read left sensor
        int right = input(RIGHT_SENSOR); // Read right sensor

        if (left == 1 && right == 1) {  // Both sensors detect the line (1)
            move_forward(100);  // Move forward at 100% speed
        } else if (left == 1 && right == 0) {  // Left sensor on line, right sensor off
            turn_left(75);  // Turn left at 75% speed
        } else if (left == 0 && right == 1) {  // Right sensor on line, left sensor off
            turn_right(75);  // Turn right at 75% speed
        } else if (left == 0 && right == 0) {  // Both sensors off the line
            move_backward(50);  // Move backward at 50% speed
        } else {
            stop();  // Unknown condition: stop the motors
        }
    }
}
